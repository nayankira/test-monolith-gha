# This workflow is autogenerated by xCLI and should not be manually edited.
name: Test monolith Reusable
on:
  workflow_call:
    inputs:
      env:
        description: env
        required: true
        type: string

jobs:
  app-a-deploy:
    uses: ./.github/workflows/test-workflows-reusable-deployment.yaml
    with:
      app: "app-a"
      env: "app-a:${{ inputs.env }}"
      version: "123"
    secrets: inherit
  app-b-deploy:
    uses: ./.github/workflows/test-workflows-reusable-deployment.yaml
    with:
      app: "app-b"
      env: "app-b:${{ inputs.env }}"
      version: "123"
    secrets: inherit
  pre-verify-barrier:
    runs-on: ubuntu-22.04
    needs: [app-a-deploy, app-b-deploy]
    steps:
      - name: "pre verify barrier"
        run: |
          echo "pre verify barrier"
      - name: The job has succeeded
        if: ${{ success() }}
        run: |
          echo "preverify=succeeded" >> $GITHUB_OUTPUT
      - name: The job has failed
        if: ${{ failure() }}
        run: |
          echo "preverify=failed" >> $GITHUB_OUTPUT
  app-a-post:
    needs: [pre-verify-barrier]
    uses: ./.github/workflows/test-workflows-reusable-verification.yaml
    with:
      app: "app-a"
      env: "app-a:${{ inputs.env }}"
      version: "123"
    secrets: inherit
  app-b-post:
    needs: [pre-verify-barrier]
    uses: ./.github/workflows/test-workflows-reusable-verification.yaml
    with:
      app: "app-b"
      env: "app-b:${{ inputs.env }}"
      version: "123"
    secrets: inherit
  post-verify-barrier:
    runs-on: ubuntu-22.04
    needs: [app-a-post, app-b-post]
    steps:
      - name: "post verify barrier"
        run: |
          echo "post verify barrier"
      - name: The job has succeeded
        if: ${{ success() }}
        run: |
          echo "postverify=succeeded" >> $GITHUB_OUTPUT
      - name: The job has failed
        if: ${{ failure() }}
        run: |
          echo "postverify=failed" >> $GITHUB_OUTPUT